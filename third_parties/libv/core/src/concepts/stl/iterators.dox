namespace std {

/// Trivial Iterator Concept
struct TrivialIterator: Assignable, EqualityComparable, DefaultConstructible
{
  /// \copydoc Container::value_type
  typedef UNDEFINED value_type;

  /// \copydoc Container::pointer
  typedef UNDEFINED pointer;

  /// \copydoc Container::reference
  typedef UNDEFINED reference;

  /// Dereference
  /// \returns A reference to the object pointed to.
  reference operator*(void) const;

  /// Member access
  /// \returns A pointer to the object pointed to.
  pointer operator->(void) const;
};

/// Input Iterator Concept
struct InputIterator: TrivialIterator
{
  /// This iterator's category.
  typedef std::input_iterator_tag iterator_category;

  /// \copydoc Container::difference_type
  typedef UNDEFINED difference_type;
};

/// Output Iterator Concept
struct OutputIterator: Assignable, DefaultConstructible
{
  /// \copydoc InputIterator::iterator_category
  typedef std::output_iterator_tag iterator_category;
};

/// Forward Iterator Concept
struct ForwardIterator: InputIterator, OutputIterator
{
  /// \copydoc InputIterator::iterator_category
  typedef std::forward_iterator_tag iterator_category;

  /// Preincrement
  /// \returns A reference to \c *this, so you can chain operations.
  this_type &operator++(void);

  /// Postincrement
  /// \returns A reference to \c *this, so you can chain operations.
  this_type operator++(int);
};

/// Bidirectional Iterator Concept
struct BidirectionalIterator: ForwardIterator
{
  /// \copydoc InputIterator::iterator_category
  typedef std::bidirectional_iterator_tag iterator_category;

  /// Predecrement
  /// \returns A reference to \c *this, so you can chain operations.
  this_type &operator--(void);

  /// Postdecrement
  /// \returns A reference to \c *this, so you can chain operations.
  this_type operator--(int);
};

/// Random Access Iterator Concept
struct RandomAccessIterator: BidirectionalIterator, LessThanComparable
{
  /// \copydoc InputIterator::iterator_category
  typedef std::random_access_iterator_tag iterator_category;

  /// Element operator
  /// \param n The increment.
  /// \returns \code *(*this + n) \endcode
  reference operator[](difference_type n) const;

  /// Iterator addition
  /// \param n The increment.
  /// \returns A reference to \c *this, so you can chain operations.
  this_type &operator+=(difference_type n);

  /// Iterator addition
  /// \param n The increment.
  /// \returns An iterator \e n past \e this.
  this_type operator+(difference_type n) const;

  /// Iterator addition
  /// \param p An iterator.
  /// \param n The increment.
  /// \returns An iterator \e n past \e p.
  friend this_type operator+(this_type p, difference_type n);

  /// Iterator subtraction
  /// \param n The decrement.
  /// \returns A reference to \c *this, so you can chain operations.
  this_type &operator-=(difference_type n);

  /// Iterator subtraction
  /// \param n The decrement.
  /// \returns An iterator \e n before \e this.
  this_type operator-(difference_type n) const;

  /// Difference
  /// \param other An iterator compatible with \e this.
  /// \returns The distance between \e this and \e other.
  difference_type operator-(const X &other) const;
};

}
